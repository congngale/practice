# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = lib/googletest/googletest

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TEST = practice_unittest

# source misc
MISC_SOURCES = $(shell find tests/misc -type f -name '*.cc')

# source div A
DIV_A_SOURCES = $(shell find tests/code_forces/a -type f -name '*.cc')

# source div B
DIV_B_SOURCES = $(shell find tests/code_forces/b -type f -name '*.cc')

# div A object files
DIV_A_OBJECTS = $(patsubst %.cc,%.o,$(DIV_A_SOURCES))

# div B object files
DIV_B_OBJECTS = $(patsubst %.cc,%.o,$(DIV_B_SOURCES))

# misc object files
MISC_OBJECTS = $(patsubst %.cc,%.o,$(MISC_SOURCES))

# object files
OBJECTS = $(DIV_A_OBJECTS) $(DIV_B_OBJECTS) $(MISC_OBJECTS)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -Isolutions -Iutils

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -Wall

# include library
LDFLAGS = -lpthread

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

.PHONY: clean code_forces div_a div_b $(TEST) test_div_a test_div_a test

all : source_div_a source_div_b $(TEST)

div_a: source_div_a test_div_a

div_b: source_div_b test_div_b

clean :
	rm -f $(OBJECTS)
	rm -f $(TEST) *.o *.a
	$(MAKE) clean -C solutions/code_forces

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

source_div_a:
	$(MAKE) -C solutions/code_forces/a

source_div_b:
	$(MAKE) -C solutions/code_forces/b

$(TEST) : $(OBJECTS) gtest_main.a 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OBJECTS) gtest_main.a -o $(TEST) $(LDFLAGS)

test_div_a : $(DIV_A_OBJECTS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DIV_A_OBJECTS) gtest_main.a -o $(TEST) $(LDFLAGS)

test_div_b : $(DIV_B_OBJECTS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DIV_B_OBJECTS) gtest_main.a -o $(TEST) $(LDFLAGS)

test:
	./$(TEST)
